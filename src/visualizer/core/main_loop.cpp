#include "core/main_loop.hpp"
#include <glad/glad.h>
#include <iostream>
#include <thread>

/**
 * [文件描述]：主循环核心实现文件
 * 功能：实现可视化器的主要渲染循环，控制应用程序的生命周期
 * 用途：为高斯散点可视化器提供标准的游戏引擎式主循环结构
 */

namespace gs::visualizer {

    /**
     * [功能描述]：MainLoop类默认构造函数
     * 使用编译器生成的默认构造函数，无需额外初始化
     */
    MainLoop::MainLoop() = default;

    /**
     * [功能描述]：执行主循环，控制整个应用程序的运行流程
     * 
     * 主循环采用经典的游戏引擎架构：
     * 1. 初始化阶段：设置OpenGL状态、加载资源等
     * 2. 循环阶段：持续执行更新-渲染循环直到程序结束
     * 3. 清理阶段：释放资源、保存状态等
     * 
     * 该循环是阻塞式的，会一直运行直到用户关闭窗口或程序异常退出
     */
    void MainLoop::run() {
        // =============================================================================
        // 步骤1：应用程序初始化阶段
        // =============================================================================
        // 调用初始化回调函数，设置OpenGL上下文、加载着色器、初始化GUI等
        if (init_callback_ && !init_callback_()) {
            // 如果初始化失败，输出错误信息并直接返回，避免程序崩溃
            std::cerr << "应用程序初始化失败!" << std::endl;
            return;
        }

        // =============================================================================
        // 步骤2：主渲染循环
        // =============================================================================
        // 循环条件：检查窗口是否应该关闭（通常来自GLFW的窗口关闭事件）
        while (should_close_callback_ ? !should_close_callback_() : true) {
            
            // =========================================================================
            // 步骤2.1：清空帧缓冲区
            // =========================================================================
            // 设置清空颜色为深灰色(0.1, 0.1, 0.1)，Alpha通道为完全不透明(1.0)
            glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
            
            // 清空颜色缓冲区和深度缓冲区，准备绘制新一帧
            // GL_COLOR_BUFFER_BIT：清空颜色信息
            // GL_DEPTH_BUFFER_BIT：清空深度信息，确保正确的深度测试
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

            // =========================================================================
            // 步骤2.2：更新应用程序状态
            // =========================================================================
            // 调用更新回调，处理用户输入、动画、物理计算、训练进度等
            // 这里会更新相机位置、高斯散点参数、GUI状态等
            if (update_callback_) {
                update_callback_();
            }

            // =========================================================================
            // 步骤2.3：渲染当前帧
            // =========================================================================
            // 调用渲染回调，绘制3D场景、高斯散点、GUI界面等
            // 包括：场景渲染、后处理效果、ImGui界面绘制
            if (render_callback_) {
                render_callback_();
            }
            
            // 注意：缓冲区交换通常在render_callback_内部完成
            // 或者由窗口管理器在render_callback_调用后自动处理
        }

        // =============================================================================
        // 步骤3：程序清理阶段
        // =============================================================================
        // 调用关闭回调，执行资源清理、状态保存、内存释放等操作
        // 包括：释放OpenGL资源、保存配置文件、停止训练线程等
        if (shutdown_callback_) {
            shutdown_callback_();
        }
    }

} // namespace gs::visualizer
